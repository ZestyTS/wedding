{"version":3,"sources":["screens/photos/photos.jsx","screens/registry/registry.jsx","screens/rsvp/rsvp.jsx","screens/travel/travel.jsx","screens/wedding/wedding.jsx","components/site-nav/site-nav.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Photos","className","Registry","src","Rsvp","Travel","Wedding","SiteNav","to","exact","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAQeA,EANA,WACX,OACI,yBAAKC,UAAU,aAAf,WCOOC,G,MARE,WACb,OACI,yBAAKD,UAAU,aACX,4BAAQE,IAAI,6HCETC,EANF,WACT,OACI,yBAAKH,UAAU,aAAf,SCIOI,EANA,WACX,OACI,yBAAKJ,UAAU,aAAf,WCmBOK,G,MApBC,WACZ,OAEI,yBAAKL,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,OACX,sDACA,+CACA,+EAEJ,yBAAKA,UAAU,OAAf,YCMLM,G,YAfC,WACZ,OACI,yBAAKN,UAAU,YACX,yBAAKA,UAAU,aACX,kBAAC,IAAD,CAASO,GAAG,IAAIC,OAAK,EAACR,UAAU,YAAhC,WACA,kBAAC,IAAD,CAASO,GAAG,UAAUP,UAAU,YAAhC,UACA,kBAAC,IAAD,CAASO,GAAG,UAAUP,UAAU,YAAhC,UACA,kBAAC,IAAD,CAASO,GAAG,YAAYP,UAAU,YAAlC,YACA,kBAAC,IAAD,CAASO,GAAG,QAAQP,UAAU,YAA9B,YCmBDS,MAzBf,WACE,OACE,yBAAKT,UAAU,OACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,UACb,4BAAQA,UAAU,eAChB,yBAAKA,UAAU,SAAf,oBACA,yBAAKA,UAAU,QAAf,qBAGF,kBAAC,EAAD,OAGF,yBAAKA,UAAU,QACb,kBAAC,IAAD,CAAOU,KAAK,IAAIF,OAAK,EAACG,UAAWN,IACjC,kBAAC,IAAD,CAAOK,KAAK,UAAUF,OAAK,EAACG,UAAWZ,IACvC,kBAAC,IAAD,CAAOW,KAAK,UAAUF,OAAK,EAACG,UAAWP,IACvC,kBAAC,IAAD,CAAOM,KAAK,YAAYF,OAAK,EAACG,UAAWV,IACzC,kBAAC,IAAD,CAAOS,KAAK,QAAQF,OAAK,EAACG,UAAWR,QCb3BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.7878f460.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Photos = () => {\r\n    return (\r\n        <div className='container'>Photos</div>\r\n    );\r\n}\r\n\r\nexport default Photos;\r\n","import React, { useEffect } from 'react';\r\nimport './registry.css';\r\n\r\nconst Registry = () => {\r\n    return (\r\n        <div className='container'>\r\n            <iframe src='https://www.myregistry.com/ExternalApps/EmbededVistorView/v2/Visitors/GiftList.aspx?registryId=2189673&pageSize=10000' />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Registry;\r\n","import React from 'react';\r\n\r\nconst Rsvp = () => {\r\n    return (\r\n        <div className='container'>RSVP</div>\r\n    );\r\n}\r\n\r\nexport default Rsvp;\r\n","import React from 'react';\r\n\r\nconst Travel = () => {\r\n    return (\r\n        <div className='container'>Travel</div>\r\n    );\r\n}\r\n\r\nexport default Travel;\r\n","import React from 'react';\r\nimport './wedding.css';\r\n\r\nconst Wedding = () => {\r\n    return (\r\n        \r\n        <div className='Wedding'>\r\n            <div className='container'>\r\n                <div className='flex-contain'>\r\n                    <div className='col'>\r\n                        <p>Friday October 23, 2020</p>\r\n                        <p>Ceremony: 5:00pm</p>\r\n                        <p>Cocktail Hour &amp; Reception immediately to follow</p>\r\n                    </div>\r\n                    <div className='col'>\r\n                        Map\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Wedding;\r\n","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport './site-nav.css';\r\n\r\nconst SiteNav = () => {\r\n    return (\r\n        <nav className=\"Site-Nav\">\r\n            <div className=\"container\">\r\n                <NavLink to='/' exact className=\"Nav-Item\">Wedding</NavLink>\r\n                <NavLink to='/photos' className=\"Nav-Item\">Photos</NavLink>\r\n                <NavLink to='/travel' className=\"Nav-Item\">Travel</NavLink>\r\n                <NavLink to='/registry' className=\"Nav-Item\">Registry</NavLink>\r\n                <NavLink to='/rsvp' className=\"Nav-Item\">RSVP</NavLink>\r\n            </div>\r\n        </nav>\r\n        \r\n    );\r\n}\r\n\r\nexport default SiteNav;\r\n","import React from 'react';\r\nimport { HashRouter, Route } from \"react-router-dom\";\r\nimport { Wedding, Photos, Travel, Registry, Rsvp } from './screens';\r\nimport './App.css';\r\n\r\nimport SiteNav from './components/site-nav/site-nav';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HashRouter>\r\n        <div className='header'>\r\n          <header className=\"header-logo\">\r\n            <div className='names'>Nicholas &amp; Kylie</div>\r\n            <div className='date'>October 23, 2020</div>\r\n          </header>\r\n\r\n          <SiteNav />\r\n        </div>\r\n\r\n        <div className='page'>\r\n          <Route path=\"/\" exact component={Wedding} />\r\n          <Route path=\"/photos\" exact component={Photos} />\r\n          <Route path=\"/travel\" exact component={Travel} />\r\n          <Route path=\"/registry\" exact component={Registry} />\r\n          <Route path=\"/rsvp\" exact component={Rsvp} />\r\n        </div>\r\n      </HashRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}